// Generated by CoffeeScript 1.7.1
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  this.BreakdownChart = (function(_super) {
    __extends(BreakdownChart, _super);

    function BreakdownChart(id, data, color) {
      this.update_data = __bind(this.update_data, this);
      this.getY = __bind(this.getY, this);
      this.getX = __bind(this.getX, this);
      this.get_groups = __bind(this.get_groups, this);
      this.display = __bind(this.display, this);
      BreakdownChart.__super__.constructor.call(this, id, data, color);
      this.width = 1200;
      this.max_range = 40;
      this.scale();
      this.damper = 0.1;
      this.xStart = 50;
      this.yStart = 50;
      this.yDelta = 150;
      this.xDelta = 100;
      this.center = {
        x: this.xDelta / 2,
        y: this.yDelta / 2
      };
      this.groupsPerLine = Math.floor((this.width - this.xStart) / this.xDelta);
    }

    BreakdownChart.prototype.display = function() {
      var lines, that;
      that = this;
      this.update_data();
      lines = Math.ceil(this.data.length / this.groupsPerLine);
      this.height = lines * this.yDelta + this.yStart + 10;
      $("#vis").css("height", "" + (Math.max(700, this.height)) + "px");
      this.vis.attr("height", this.height);
      this.vis.select("svg").attr("height", this.height);
      this.groups = this.vis.selectAll("g.cell").data(this.data, function(d) {
        return d.id;
      }).enter().append("g").attr("id", function(d) {
        return d.id;
      }).attr("class", "cell").attr("transform", (function(_this) {
        return function(d, i) {
          return "translate(" + (_this.width + _this.getX(i)) + ", " + (_this.getY(i)) + ")";
        };
      })(this));
      this.groups.each(function(d) {
        return that.plot(d3.select(this), that.get_group_data(d), false);
      });
      this.groups.append("text").attr("x", this.center.x).attr("y", this.yDelta).attr("text-anchor", "middle").text(function(d) {
        return that.get_group_title(d);
      });
      return this.groups.transition().duration(1200).attr("transform", (function(_this) {
        return function(d, i) {
          return "translate(" + (_this.getX(i)) + ", " + (_this.getY(i)) + ")";
        };
      })(this));
    };

    BreakdownChart.prototype.get_groups = function() {
      return this.vis.selectAll("g.cell").data(this.data, function(d) {
        return d.id;
      });
    };

    BreakdownChart.prototype.getX = function(i) {
      return this.xStart + this.xDelta * (i % this.groupsPerLine);
    };

    BreakdownChart.prototype.getY = function(i) {
      return this.yStart + this.yDelta * Math.floor(i / this.groupsPerLine);
    };

    BreakdownChart.prototype.update_data = function() {
      return this.data.forEach((function(_this) {
        return function(d) {
          d.radius = _this.radius_scale(d.value);
          d.x = Math.random() * _this.xDelta / 2;
          d.y = Math.random() * _this.yDelta / 2;
          delete d.px;
          return delete d.py;
        };
      })(this));
    };

    return BreakdownChart;

  })(BubbleChart);

}).call(this);
