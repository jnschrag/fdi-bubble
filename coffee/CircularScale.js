// Generated by CoffeeScript 1.7.1
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  this.CircularScale = (function() {
    function CircularScale(vis, id, title, scale, values, anchor) {
      this.update = __bind(this.update, this);
      this.exit = __bind(this.exit, this);
      this.refresh = __bind(this.refresh, this);
      this.enter = __bind(this.enter, this);
      this.create = __bind(this.create, this);
      this.elements = __bind(this.elements, this);
      this.compute_parameters = __bind(this.compute_parameters, this);
      this.exists = __bind(this.exists, this);
      this.vis = vis.removeLeadHash();
      this.anchor = anchor;
      this.id = id.removeLeadHash();
      this.scale = scale;
      this.values = values.sort(d3.descending);
      this.title = title;
      this.fixed_formatter = d3.format(",d");
      this.delay = 750;
      this.create();
    }

    CircularScale.prototype.exists = function() {
      return $("#" + this.id).length > 0;
    };

    CircularScale.prototype.compute_parameters = function() {
      var radiusMax;
      radiusMax = this.scale(this.values[0]);
      this.center = {
        x: this.anchor.x + radiusMax,
        y: this.anchor.y + radiusMax
      };
      this.width = radiusMax * 2 + 10;
      this.height = this.width;
      this.padding = 100;
      return this.radius = this.height / 2;
    };

    CircularScale.prototype.elements = function() {
      return [this.svg.selectAll("circle").data(this.values), this.svg.selectAll("line").data(this.values), this.svg.selectAll("text").data(this.values)];
    };

    CircularScale.prototype.create = function() {
      var circles, html, lines, style, text, title, _ref;
      this.compute_parameters();
      style = "left:" + this.anchor.x + "px; top:" + this.anchor.y + "px; position:relative; width:" + (this.width + this.padding) + "px;";
      title = "<p>" + this.title + "</p>";
      html = '<div id="' + this.id + '" style="' + style + '">' + title + '</div>';
      $('#' + this.vis).append(html);
      this.svg = d3.select("#" + this.id).append("svg").attr("id", "svg_scale").style("position", "relative");
      _ref = this.elements(), circles = _ref[0], lines = _ref[1], text = _ref[2];
      return this.enter(circles, lines, text);
    };

    CircularScale.prototype.enter = function(circles, lines, text) {
      var that;
      that = this;
      if (this.svg.attr("width") < this.width + this.padding) {
        this.svg = this.svg.attr("width", this.width + this.padding).attr("height", this.height + 10);
      }
      circles.enter().append("circle").attr("class", "scaleCircle").attr("cx", this.width / 2).attr("cy", function(d) {
        return 2 * that.radius - that.scale(d);
      }).attr("r", function(d) {
        return 0;
      });
      lines.enter().append("line").attr("class", "scaleCircle").attr("x1", function(d) {
        return that.width / 2;
      }).attr("y1", function(d) {
        return 2 * (that.radius - that.scale(d));
      }).attr("x2", function(d) {
        return that.width / 2;
      }).attr("y2", function(d) {
        return 2 * (that.radius - that.scale(d));
      });
      text.enter().append("text").attr("text-anchor", "end").attr("class", "scaleCircleLabel").text(function(d) {
        return that.fixed_formatter(d);
      }).attr("x", this.width / 2).attr("y", function(d) {
        return 2 * (that.radius - that.scale(d));
      });
      return this.update(circles, lines, text);
    };

    CircularScale.prototype.refresh = function(scale, values) {
      var circles, lines, text, _ref;
      this.scale = scale;
      this.values = values.sort(d3.descending);
      this.compute_parameters();
      _ref = this.elements(), circles = _ref[0], lines = _ref[1], text = _ref[2];
      this.enter(circles, lines, text);
      this.exit(circles, lines, text);
      return this.update(circles, lines, text);
    };

    CircularScale.prototype.exit = function(circles, lines, text) {
      var that;
      that = this;
      circles.exit().transition().duration(this.delay).ease("linear").attr("r", 0).remove();
      lines.exit().remove();
      return text.exit().remove();
    };

    CircularScale.prototype.update = function(circles, lines, text) {
      var that;
      that = this;
      circles.transition().duration(this.delay).attr("cx", this.width / 2).attr("cy", function(d) {
        return 2 * that.radius - that.scale(d);
      }).attr("r", function(d) {
        return that.scale(d);
      });
      lines.transition().duration(this.delay).attr("class", "scaleCircle").attr("x1", function(d) {
        return that.width / 2;
      }).attr("y1", function(d) {
        return 2 * (that.radius - that.scale(d));
      }).attr("x2", function(d) {
        return that.width + that.padding / 2;
      }).attr("y2", function(d) {
        return 2 * (that.radius - that.scale(d));
      });
      return text.transition().duration(this.delay).text(function(d) {
        return that.fixed_formatter(d);
      }).attr("x", function(d) {
        return that.width + that.padding / 2;
      }).attr("y", function(d) {
        return 2 * (that.radius - that.scale(d));
      });
    };

    return CircularScale;

  })();

}).call(this);
