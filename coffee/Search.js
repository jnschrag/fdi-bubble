// Generated by CoffeeScript 1.7.1
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  this.Search = (function() {
    function Search(container, visual, mapData, processFoundItem, anchor) {
      this.search = __bind(this.search, this);
      this.create_search_box = __bind(this.create_search_box, this);
      this.id = "#" + (container.removeLeadHash());
      this.visual = visual;
      this.data = visual.data;
      this.processFoundItem = processFoundItem;
      this.anchor = anchor;
      this.entities = this.data.map(mapData);
      $.fn.typeahead.Constructor.prototype.blur = function() {
        var that;
        that = this;
        return setTimeout((function() {
          return that.hide();
        }), 250);
      };
    }

    Search.prototype.create_search_box = function() {
      var findEntity, html, that;
      findEntity = "#findEntity";
      if ($(findEntity).length < 1) {
        html = '<div class="control-group" style="left: ' + this.anchor.x + 'px; top: ' + this.anchor.y + 'px; position: relative; width: 200px" > <label class="control-label" for="findEntity">Find:</label> <div class="controls"> <input type="text" autocomplete="off" style="width: 150px" id="findEntity" name="findEntity"> </div> </div>';
        $(this.id).append(html);
        $(findEntity).val("");
        that = this;
        $(findEntity).typeahead({
          items: 10,
          source: (function(_this) {
            return function(query) {
              var entity, error, good, res;
              error = function() {
                return $(findEntity).closest('.control-group').addClass('error');
              };
              good = function() {
                return $(findEntity).closest('.control-group').removeClass('error');
              };
              if (_this.found != null) {
                _this.visual.hide_details(_this.found);
                _this.found = null;
              }
              good();
              query = query.toUpperCase();
              res = (function() {
                var _i, _len, _ref, _results;
                _ref = this.entities;
                _results = [];
                for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                  entity = _ref[_i];
                  if (entity.slice(0, query.length).toUpperCase() === query) {
                    _results.push(entity);
                  }
                }
                return _results;
              }).call(_this);
              if (res.length === 0) {
                error();
              }
              return res;
            };
          })(this),
          updater: function(item) {
            return that.search(item);
          },
          highlighter: function(item) {
            return "<strong>" + (item.slice(0, this.query.length)) + "</strong>" + (item.slice(this.query.length));
          }
        });
        return $(findEntity).focusout((function(_this) {
          return function() {
            if (_this.found != null) {
              return _this.visual.hide_details(_this.found);
            }
          };
        })(this));
      }
    };

    Search.prototype.search = function(text) {
      var element;
      this.found = this.processFoundItem(this.data, text);
      element = this.visual.vis.select("#" + this.found.id);
      this.visual.show_details(this.found, 0, element);
      return text;
    };

    return Search;

  })();

}).call(this);
