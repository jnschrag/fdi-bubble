// Generated by CoffeeScript 1.7.1
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  this.BubbleChart = (function() {
    function BubbleChart(id, data, color) {
      this.cleanup = __bind(this.cleanup, this);
      this.hide_details = __bind(this.hide_details, this);
      this.show_details = __bind(this.show_details, this);
      this.set_color_scheme = __bind(this.set_color_scheme, this);
      this.load_overlay = __bind(this.load_overlay, this);
      this.on_tick = __bind(this.on_tick, this);
      this.move_towards_center = __bind(this.move_towards_center, this);
      this.display = __bind(this.display, this);
      this.plot = __bind(this.plot, this);
      this.force_layout = __bind(this.force_layout, this);
      this.update_circles = __bind(this.update_circles, this);
      this.create_circles = __bind(this.create_circles, this);
      this.get_bubble = __bind(this.get_bubble, this);
      this.create_vis = __bind(this.create_vis, this);
      this.create_scale = __bind(this.create_scale, this);
      this.scale = __bind(this.scale, this);
      this.get_circular_scale_values = __bind(this.get_circular_scale_values, this);
      this.id = "#" + (id.removeLeadHash());
      this.data = data;
      this.width = 940;
      this.height = 700;
      this.forces = [];
      this.log2_10 = Math.log(10);
      this.log10 = (function(_this) {
        return function(x) {
          return Math.floor(Math.log(x) / _this.log2_10);
        };
      })(this);
      this.colorScheme = color == null ? "RdGy" : color;
      this.percent_formatter = d3.format(",.2f");
      this.fixed_formatter = d3.format(",d");
      this.center = {
        x: this.width / 2,
        y: this.height / 2
      };
      this.xDelta = this.width;
      this.yDelta = this.height;
      this.layout_gravity = -0.01;
      this.damper = 0.12;
      this.charge = function(d) {
        return -Math.pow(d.radius, 2) / 8;
      };
      this.friction = 0.9;
      this.vis = null;
      this.force = null;
      this.color_class = (function(_this) {
        return function(n) {
          return "q1-6";
        };
      })(this);
      this.max_range = 65;
      this.max_amount = d3.max(this.data, function(d) {
        return d.value;
      });
      this.scale();
      d3.interpolators.push(function(a, b) {
        var ma, mb, re;
        re = /^q([0-9])+/;
        ma = re.exec(a);
        mb = re.exec(b);
        if ((ma != null) && (mb != null)) {
          a = parseInt(ma[1]);
          b = parseInt(mb[1]) - a;
          return function(t) {
            return "q" + (Math.round(a + b * t)) + "-9";
          };
        }
      });
    }

    BubbleChart.prototype.get_circular_scale_values = function() {
      var i, iMin, _results;
      i = this.log10(this.max_amount);
      iMin = i - 2 > 0 ? i - 2 : 0;
      _results = [];
      while (i >= iMin) {
        _results.push(Math.pow(10, i--));
      }
      return _results;
    };

    BubbleChart.prototype.scale = function() {
      return this.radius_scale = d3.scale.pow().exponent(0.5).domain([0, this.max_amount]).range([2, this.max_range]);
    };

    BubbleChart.prototype.create_scale = function(anchor) {
      var values;
      values = this.get_circular_scale_values();
      if ((this.bubble_scale == null) || !this.bubble_scale.exists()) {
        return this.bubble_scale = new CircularScale(this.id, "circularScale", "Circles are sized by population", this.radius_scale, values, anchor != null ? anchor : {
          x: this.width,
          y: -this.height
        });
      } else {
        return this.bubble_scale.refresh(this.radius_scale, values);
      }
    };

    BubbleChart.prototype.create_vis = function() {
      $(this.id).children().remove();
      $(this.id).css("width", "" + this.width + "px");
      $(this.id).css("height", "" + this.height + "px");
      return this.vis = d3.select(this.id).append("svg").attr("width", this.width).attr("height", this.height).attr("id", "svg_vis").attr("class", this.colorScheme);
    };

    BubbleChart.prototype.get_bubble = function(cell, data) {
      return cell.selectAll("circle").data(data, function(d) {
        return d.id;
      });
    };

    BubbleChart.prototype.create_circles = function(cell, data) {
      var that;
      that = this;
      return this.get_bubble(cell, data).enter().append("circle").attr("r", 0).attr("class", (function(_this) {
        return function(d) {
          return _this.color_class(d.group);
        };
      })(this)).attr("stroke-width", 2).attr("stroke", function(d) {
        return d3.rgb($(this).css("fill")).darker();
      }).attr("id", function(d) {
        return "" + d.id;
      }).on("mouseover", function(d, i) {
        return that.show_details(d, i, this);
      }).on("mouseout", function(d, i) {
        return that.hide_details(d, i, this);
      });
    };

    BubbleChart.prototype.update_circles = function(cell, data) {
      return this.get_bubble(cell, data).attr("stroke", function(d) {
        return d3.rgb($(this).css("fill")).darker();
      });
    };

    BubbleChart.prototype.force_layout = function(circles, data, size, move, oneForce, param) {
      var force, _ref;
      force = d3.layout.force().nodes(data).size(size);
      if ((oneForce != null) && oneForce) {
        if ((_ref = this.force) != null) {
          _ref.stop();
        }
        this.force = force;
      } else {
        this.forces.push(force);
      }
      return force.gravity(this.layout_gravity).charge(this.charge).friction(this.friction).on("tick", (function(_this) {
        return function(e) {
          return _this.on_tick(move, e, circles, param);
        };
      })(this));
    };

    BubbleChart.prototype.plot = function(cell, data, oneForce) {
      var circles, force;
      circles = this.create_circles(cell, data);
      circles.transition().duration(2000).attr("r", function(d) {
        return d.radius;
      });
      force = this.force_layout(circles, data, [this.xDelta, this.yDelta], this.move_towards_center, oneForce);
      return force.start();
    };

    BubbleChart.prototype.display = function() {
      return this.plot(this.vis, this.data, true);
    };

    BubbleChart.prototype.move_towards_center = function(alpha) {
      return (function(_this) {
        return function(d) {
          d.x = d.x + (_this.center.x - d.x) * _this.damper * alpha;
          return d.y = d.y + (_this.center.y - d.y) * _this.damper * alpha;
        };
      })(this);
    };

    BubbleChart.prototype.on_tick = function(move, e, circles, param) {
      return circles.each(move(e.alpha)).attr("cx", function(d) {
        return d.x;
      }).attr("cy", function(d) {
        return d.y;
      });
    };

    BubbleChart.prototype.load_overlay = function(data, i, element) {
      return false;
    };

    BubbleChart.prototype.set_color_scheme = function(color) {
      this.colorScheme = color;
      return this.vis = this.vis.attr("class", color);
    };

    BubbleChart.prototype.show_details = function(data, i, element) {
      return void 0;
    };

    BubbleChart.prototype.hide_details = function(data, i, element) {
      return void 0;
    };

    BubbleChart.prototype.cleanup = function() {
      var force, _i, _len, _ref, _ref1;
      if ((_ref = this.force) != null) {
        _ref.stop();
      }
      _ref1 = this.forces;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        force = _ref1[_i];
        if (force != null) {
          force.stop();
        }
      }
      return void 0;
    };

    return BubbleChart;

  })();

}).call(this);
